Descrição: Desenvolvo uma plataforma de música digital e estou lutando contra a complexidade dos usuários e conteúdos. 
a. Tenho diferentes tipos de assinantes: gratuitos, premium e família, cada um com limitações e benefícios específicos. 
b. Os artistas também são variados: independentes, de gravadoras e podcasters, cada categoria com formas diferentes de monetização. 
c. Meu catálogo inclui músicas, podcasts, audiolivros e sons ambientes, todos exigindo metadados específicos. 
d. Recebo semanalmente arquivos CSV com novos lançamentos das gravadoras e preciso atualizar o banco de dados automaticamente. 
e. Dados como histórico de reprodução dos usuários e informações de pagamento dos artistas devem ser mantidos privados.

* Deverão me mostrar o problema e como pensaram em resolver;
* Deverão me mostrar onde aplicaram os conceitos da orientação a objetos e por que;
* Mostrar a solução funcionando.
* Deverá ter tratamento de erros;
* Deverá está organizado em módulos;
* Todos os atributos devem ser privados!!
* Precisa de herança

# Plataforma de Streaming de Música

“Desenvolvo uma plataforma de música digital e estou lutando com a complexidade dos usuários e dos conteúdos.

Tenho três tipos de assinantes e cada um precisa ser tratado de forma diferente. O assinante gratuito pode ouvir faixas com anúncios, tem limite de pulos,
qualidade de áudio reduzida e não pode baixar para ouvir offline. O assinante premium escuta sem anúncios, com qualidade alta e download offline liberado. O plano família 
precisa permitir múltiplos perfis sob a mesma conta, controle parental para menores e os mesmos benefícios do premium em cada perfil. 

Sempre que um usuário tenta executar uma ação (pular faixa, baixar, trocar qualidade), o sistema deve verificar as permissões do seu plano e registrar o que aconteceu.

Do lado dos criadores, também tenho perfis diferentes. 

Existem artistas independentes, que enviam seus lançamentos diretamente e recebem pagamento por stream elegível; artistas de gravadoras, cujos catálogos chegam por ingestão de
metadados e seguem regras contratuais de repasse; e podcasters, que podem monetizar por publicidade e patrocínio vinculados aos episódios. Em relatórios internos quero ver o 
desempenho por criador (streams válidos, ouvintes únicos, retenção por faixa/episódio), mas os detalhes financeiros só podem ser acessados por perfis autorizados.

Meu catálogo não é homogêneo.
Tenho músicas, podcasts, audiolivros e sons ambientes. Ao abrir um item, é essencial ver os metadados comuns (título, criador, data de lançamento, gênero, duração) 
e, logo abaixo, os detalhes específicos do formato. Para música, preciso de ISRC, álbum, número da faixa e selo, além do indicador de conteúdo explícito. 
Em podcast, devo lidar com temporadas e episódios, feed/RSS de origem e capítulos; em audiolivro, registrar narrador, editora e estrutura de capítulos; 
para sons ambientes, marcar se são loopáveis e faixa de ruído. O sistema deve recusar cadastros que não tragam os campos obrigatórios do seu tipo (por exemplo, música sem ISRC).
Semanalmente recebo arquivos CSV de novas faixas e lançamentos de gravadoras parceiras, com colunas como content_type;title;artist_id;release_date;duration_sec;isrc_or_id;album;
explicit;genre;rights_owner. Preciso importar esses arquivos, validar linha a linha e atualizar o banco: se o identificador (ISRC/ID) já existir, atualiza metadados; se for 
novo, cria o registro; se vier algo inconsistente (ex.: música sem ISRC, data inválida), rejeita apenas a linha e gera relatório de erros sem travar a importação.
Quando houver novas versões (remaster, deluxe), devem ser cadastradas como edições relacionadas, preservando o histórico.
A privacidade é fundamental. Histórico de reprodução (o que cada usuário ouviu, quando e por quanto tempo) é pessoal e não pode aparecer em relatórios públicos; o usuário pode 
ver o próprio histórico e estatísticas agregadas. Informações de pagamento dos artistas e detalhes de contratos são restritas a perfis financeiros e nunca aparecem em exports 
gerais. Senhas são guardadas com hash e qualquer dado sensível deve ser exposto apenas por métodos controlados.